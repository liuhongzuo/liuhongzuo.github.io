import torch
import torch.nn as nn
from torch.utils.data import DataLoader, Dataset
from transformers import RobertaTokenizer, RobertaModel, AdamW

# ====== 1. 数据准备 ======
class SimpleDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len=64):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        encoding = self.tokenizer(
            self.texts[idx],
            padding="max_length",
            truncation=True,
            max_length=self.max_len,
            return_tensors="pt"
        )
        return {
            "input_ids": encoding["input_ids"].squeeze(0),
            "attention_mask": encoding["attention_mask"].squeeze(0),
            "labels": torch.tensor(self.labels[idx], dtype=torch.long)
        }

# 示例数据（500 条时替换掉这里）
texts = ["Audio init failed", "GPU driver timeout", "Network unreachable"]
labels = [0, 1, 2]   # 0=audio, 1=gpu, 2=network
num_labels = len(set(labels))

tokenizer = RobertaTokenizer.from_pretrained("microsoft/codebert-base")
dataset = SimpleDataset(texts, labels, tokenizer)
dataloader = DataLoader(dataset, batch_size=2, shuffle=True)

# ====== 2. 模型定义 ======
class CodeBERTClassifier(nn.Module):
    def __init__(self, num_labels):
        super(CodeBERTClassifier, self).__init__()
        self.bert = RobertaModel.from_pretrained("microsoft/codebert-base")
        hidden_size = self.bert.config.hidden_size
        self.classifier = nn.Linear(hidden_size, num_labels)

    def forward(self, input_ids, attention_mask, labels=None):
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        pooled = outputs.last_hidden_state[:, 0, :]  # [CLS] 向量
        logits = self.classifier(pooled)
        loss = None
        if labels is not None:
            loss_fn = nn.CrossEntropyLoss()
            loss = loss_fn(logits, labels)
        return loss, logits

model = CodeBERTClassifier(num_labels)

# ====== 3. 训练循环 ======
optimizer = AdamW(model.parameters(), lr=2e-5)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

for epoch in range(3):  # 训练 3 个 epoch
    model.train()
    for batch in dataloader:
        input_ids = batch["input_ids"].to(device)
        attention_mask = batch["attention_mask"].to(device)
        labels = batch["labels"].to(device)

        loss, logits = model(input_ids, attention_mask, labels)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f"Epoch {epoch+1}: loss = {loss.item():.4f}")

# ====== 4. 推理 ======
model.eval()
test_text = "Audio buffer underrun"
inputs = tokenizer(test_text, return_tensors="pt", padding=True, truncation=True).to(device)
_, logits = model(inputs["input_ids"], inputs["attention_mask"])
pred = torch.argmax(logits, dim=1).item()
print("预测类别:", pred)
